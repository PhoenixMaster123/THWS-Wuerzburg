Fakultät rekursiv: n! - Faktoriel

define (fakultaet n)
(if (= n 1)
1
(* n (fakultaet (- n 1)))))
____________________________________________________
Fakultät iterativ:

(define (fakultät-iter n)
  (define (iter produkt ziel)
    (if (= ziel 0)
        produkt
        (iter (* produkt ziel) (- ziel 1))))
  (iter 1 n))


Erläuterung auf Deutsch:

Die iterative Berechnung der Fakultät in Scheme verwendet eine Schleife, um das Ergebnis zu ermitteln. Im Gegensatz zur rekursiven Methode, bei der die Funktion sich selbst aufruft, wiederholt die iterative Methode eine bestimmte Operation eine festgelegte Anzahl von Malen.

Erläuterung auf Bulgarisch:

Итеративното факторно изчисление в Scheme използва цикъл за намиране на резултата. За разлика от рекурсивния метод, при който функцията се извиква сама, итеративният метод повтаря конкретна операция определен брой пъти.
____________________________________________________
Fibonacci rekursiv:

(define (fibonacci n)
  (if (< n 2)
      n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))
____________________________________________________
Fibonacci iterativ:

(define (fibonacci-iter n)
  (define (iter a b count)
    (if (= count 0)
        a
        (iter b (+ a b) (- count 1))))
  (iter 0 1 n))

Erläuterung auf Deutsch:

Die iterative Berechnung der Fibonacci-Folge in Scheme verwendet eine Schleife, um die Fibonacci-Zahlen zu ermitteln. Im Gegensatz zur rekursiven Methode, bei der die Funktion sich selbst aufruft, wiederholt die iterative Methode eine bestimmte Operation eine festgelegte Anzahl von Malen.

Erläuterung auf Bulgarisch:

Итеративното изчисление на последователността на Фибоначи в Scheme използва цикъл за намиране на числата на Фибоначи. За разлика от рекурсивния метод, при който функцията се извиква сама, итеративният метод повтаря конкретна операция определен брой пъти.
_________________________________________________________________
Baumrekursion

(define (fib n)
  (cond ((= n 0) 0)
    ((= n 1) 1)
      (else (+ (fib (- n 1)) (fib (- n 2))))))

Erläuterung auf Deutsch:

Baumrekursion bezieht sich auf eine Form der Rekursion, bei der eine Funktion sich selbst aufruft, um auf alle Teilbäume eines bestimmten Knotens eines Baums zu arbeiten. 

Erläuterung auf Bulgarisch:

Дървовидната рекурсия се отнася до форма на рекурсия, при която функция се самоизвиква, за да оперира с всички поддървета на определен възел на дърво.

Wie funktionert:

1 - (define (fib n) ...) definiert die Funktion fib, die die Fibonacci-Zahl für die gegebene Zahl n berechnet.

2 - (cond ((= n 0) 0) ...) ist eine bedingte Anweisung, die in diesem Fall prüft, ob n gleich 0 ist. Wenn ja, wird 0 zurückgegeben, da die 0-te Fibonacci-Zahl 0 ist.

3 - (= n 1) 1) überprüft, ob n gleich 1 ist. Wenn ja, wird 1 zurückgegeben, da die 1-te Fibonacci-Zahl ebenfalls 1 ist.

4 - (else (+ (fib (- n 1)) (fib (- n 2))))) ist der rekursive Schritt. Wenn weder der Fall n = 0 noch n = 1 zutrifft, wird die Funktion fib mit den Argumenten (- n 1) und (- n 2) aufgerufen und die Ergebnisse werden addiert.

Alternative Berechnung mit Iteration

(define (fib2 n)
(fib-iter 1 0 n))
(define (fib-iter a b zaehler)
(if (= zaehler 0)
b
(fib-iter (+ a b) a (- zaehler 1))))
________________________________________________________________
(define (wurzel x)
(define (wurzel-iter schaetzwert x)
(if (gut-genug? schaetzwert x)
schaetzwert
(wurzel-iter (verbessern schaetzwert x) x)))
(define (verbessern schaetzwert x)
  (mittelwert schaetzwert (/ x schaetzwert)))
(define (mittelwert x y) (/ (+ x y) 2))
(define (gut-genug? schaetzwert x)
(< (abs (- (quadrat schaetzwert) x)) 0.00001))
 (define(quadrat x) (* x x))
(wurzel-iter 1.0 x))

Wie funktioniert:

1 - Definiert die Funktion wurzel, die die Quadratwurzel einer gegebenen Zahl x berechnet. 

(define (wurzel x)

2 - Definiert eine interne Hilfsfunktion wurzel-iter, die eine iterative Herangehensweise an die Berechnung der Wurzel verwendet. Diese Funktion akzeptiert zwei Argumente: schaetzwert ist der aktuelle Schätzwert für die Wurzel, und x ist die ursprüngliche Zahl.

(define (wurzel-iter schaetzwert x)

3 - (if (gut-genug? schaetzwert x) -> Überprüfung, ob der aktuelle Schätzwert gut genug ist

JA Argument: schaetzwert -> Wenn ja, dann ist der aktuelle Schätzwert das Ergebnis

NEIN Argument: (wurzel-iter (verbessern schaetzwert x) x))) -> Wenn nicht, dann verbessern wir den Schätzwert und wiederholen den Prozess:   

4 - Eine Funktion zur Berechnung des Mittelwerts zwischen zwei Zahlen:

  (define (mittelwert a b)
    (/ (+ a b) 2))

5 - Eine Funktion zur Verbesserung des Schätzwerts:

  (define (verbessern schaetzwert x)
    (mittelwert schaetzwert (/ x schaetzwert)))

6 - Eine Funktion zur Überprüfung, ob der Schätzwert gut genug ist

(define (gut-genug? schaetzwert x)
(< (abs (- (quadrat schaetzwert) x)) 0.00001))

7 - Initialisiert den Berechnungsprozess mit einem anfänglichen Schätzwert von 1.0.

(wurzel-iter 1.0 x))
____________________________________________________________________________________________________________________















